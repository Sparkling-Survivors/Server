syntax = "proto3";

package Protocol;
import "google/protobuf/timestamp.proto";
option csharp_namespace = "Google.Protobuf.Protocol";

enum MsgId {
  CS_ROOM_LIST = 0;
  SC_ROOM_LIST = 1;
  CS_MAKE_ROOM = 2;
  SC_MAKE_ROOM = 3;
  CS_ENTER_ROOM = 4;
  SC_ALLOW_ENTER_ROOM = 5;
  SC_INFORM_NEW_FACE_IN_ROOM = 6;
  CS_LEAVE_ROOM = 7;
  SC_LEAVE_ROOM = 8;
  CS_READY_ROOM = 9;
  SC_READY_ROOM = 10;
  
  SC_PING_PONG = 11;
  CS_PING_PONG = 12;
  DSC_PING_PONG = 13;
  CDS_PING_PONG = 14;

  CS_CONNECT_DEDICATED_SERVER = 15; //게임 시작버튼을 클라에서 눌렀을때 룸서버에게 데디서버 생성 및 정보 요청
  SC_CONNECT_DEDICATED_SERVER = 16; //룸서버로부터 데디서버 생성 및 관련 정보 응답

  CDS_INFORM_ROOM_INFO = 17; //방장이 데디서버에게 방정보 전달
  
  CDS_ALLOW_ENTER_GAME = 18; //데디서버에게 인게임 접속 요청
  DSC_ALLOW_ENTER_GAME = 19; //데디서버로부터 인게임 접속 가능여부 응답
  
  DSC_INFORM_NEW_FACE_IN_DEDICATED_SERVER = 20; //데디서버로부터 새로운 플레이어가 접속했다는 정보
  DSC_INFORM_LEAVE_DEDICATED_SERVER = 21; //데디서버로부터 플레이어가 나갔다는 정보
  
  DSC_START_GAME = 22; //데디서버가 클라에게 게임 시작 정보 전달
  
  CDS_MOVE = 23; //데디서버에게 플레이어의 이동정보 전송
  DSC_MOVE = 24; //데디서버로부터 플레이어의 이동정보 전달
  
  DSC_DAY_TIMER_START = 25; //데디서버가 낮 타이머 시작을 클라들에게 전달
  DSC_DAY_TIMER_SYNC = 26; //데디서버가 낮 타이머 동기화정보를 클라들에게 전달
  DSC_DAY_TIMER_END = 27; //데디서버가 낮 타이머 종료를 클라들에게 전달
  DSC_NIGHT_TIMER_START = 28; //데디서버가 밤 타이머 시작을 클라들에게 전달
  DSC_NIGHT_TIMER_SYNC = 29; //데디서버가 밤 타이머 동기화정보를 클라들에게 전달
  DSC_NIGHT_TIMER_END = 30; //데디서버가 밤 타이머 종료를 클라들에게 전달
  
  DSC_NEW_CHESTS_INFO = 31; //데디서버가 새로운 상자들 정보를 클라들에게 전달 (낮에 상자 초기화 용)
  CDS_TRY_CHEST_OPEN = 32; //클라가 데디서버에게 상자 열기 요청
  DSC_CHEST_OPEN_SUCCESS = 33; //데디서버가 모든 클라에게 상자 열기 성공 결과 전달
  
  CDS_REQUEST_TIMESTAMP = 34; //클라가 데디서버에게 타임스탬프 요청
  DSC_RESPONSE_TIMESTAMP = 35; //데디서버가 클라에게 타임스탬프 응답
}

enum ReasonRejected{
  RoomNotExist = 0;
  CurrentlyPlaying = 1;
  RoomIsFull = 2;
  WrongPassword = 3;
}

message PlayerInfo {
  int32 playerId = 1;
  string name = 2;
}

message PositionInfo {
  float posX = 1;
  float posY = 2;
  float posZ = 3;
}

message RotationInfo {
  float rotX = 1;
  float rotY = 2;
  float rotZ = 3;
  float rotW = 4;
}

message TransformInfo{
  PositionInfo position = 1;
  RotationInfo rotation = 2;
}

message RoomInfo {
  int32 roomId = 1;
  string title = 2;
  int32 currentCount = 3;
  int32 maxCount = 4;
  bool isPrivate = 5;
  bool isPlaying = 6;
  int32 roomMasterPlayerId = 7;
}

message ChestInfo{
  int32 chestId = 1;
  int32 chestLevel = 2;
  int32 chestPoint = 3;
}

message Velocity{
  float x = 1;
  float y = 2;
  float z = 3;
}

message CS_RoomList {
}

message SC_RoomList {
  repeated RoomInfo rooms = 1;
}


message CS_MakeRoom {
  string title = 1;
  bool isPrivate = 2;
  string password = 3;
}

message SC_MakeRoom {
  RoomInfo room = 1;
  string password = 2;
}

message CS_EnterRoom {
  int32 roomId = 1;
  string password = 2;
  string name = 3;
}

message SC_AllowEnterRoom {
  bool canEnter = 1;
  int32 myPlayerId = 2;
  RoomInfo room = 3;
  repeated PlayerInfo players = 4;
  ReasonRejected reasonRejected = 5;
}


message SC_InformNewFaceInRoom{
  int32 roomId = 1;
  int32 currentCount = 2;
  PlayerInfo newPlayer = 3;
}

message CS_LeaveRoom {
  int32 roomId = 1;
}

message SC_LeaveRoom {
  int32 playerId=1; //방에서 나간 사람의 플레이어id
  int32 roomMasterPlayerId = 2; //방장의 플레이어id (방장이 나갔을수도 있으니 새로 갱신)
}

message CS_ReadyRoom {
  int32 roomId = 1;
  int32 playerId = 2;
  bool isReady = 3;
}

message SC_ReadyRoom {
  int32 roomId = 1;
  map<int32, bool> readyPlayerInfo = 2; //플레이어id, 준비상태
}

message SC_PingPong {
}

message CS_PingPong {
}

message DSC_PingPong {
}

message CDS_PingPong {
}

message CS_ConnectDedicatedServer {
  int32 roomId = 1;
}

message SC_ConnectDedicatedServer {
  string ip = 1;
  int32 port = 2;
}

message CDS_InformRoomInfo {
  int32 roomId = 1;
  int32 playerNum = 2;
}

message CDS_AllowEnterGame {
  int32 roomId = 1;
  string name = 2;
  
}

message DSC_AllowEnterGame {
  int32 myDedicatedPlayerId = 1;
  repeated PlayerInfo players = 2;
  map <int32, TransformInfo> playerTransforms = 3; //[플레이어id, transform]
}

message DSC_InformNewFaceInDedicatedServer{
  PlayerInfo newPlayer = 1;
  TransformInfo spawnTransform = 2;
}

message DSC_InformLeaveDedicatedServer{
  int32 leavePlayerId = 1;
}

message DSC_StartGame{
}

message CDS_Move{
  int32 dediplayerId = 1; //이거 아마 지워도될듯?
  TransformInfo transformInfo = 2; //플레이어의 transform 정보
  int32 keyboardInput = 3;
  Velocity velocity = 4; //속도
  google.protobuf.Timestamp timestamp = 5; //서버시간으로 동기화된 타임스탬프 
}

message DSC_Move{
  int32 dediplayerId = 1;
  TransformInfo transformInfo = 2; //transform 정보
  int32 keyboardInput = 3;
  Velocity velocity = 4; //속도
  google.protobuf.Timestamp timestamp = 5; //서버시간으로 동기화된 타임스탬프 
}

message DSC_NewChestsInfo{
  map<int32, ChestInfo> chestsInfo = 1; //상자들의 정보
}

message CDS_TryChestOpen{
  int32 myDediplayerId = 1; 
  int32 chestId = 2;
}

message DSC_ChestOpenSuccess{
  int32 chestId = 1; //열린 상자의 id
  int32 playerId = 2; //상자를 열은 플레이어의 id
}

message CDS_RequestTimestamp{
}

message DSC_ResponseTimestamp{
  google.protobuf.Timestamp timestamp = 1;
}

